generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String
  password String
  avatar   String?
  token    String?
  role     Role    @default(common)

  actions                   Action[]
  favoriteUserFunctionality FavoriteUserFunctionality[]
  newFunctionality          NewFunctionality[]
  userSeeFunctionality      UserSeeFunctionality[]

  finishedAt      DateTime?         @db.Timestamptz()
  createdAt       DateTime          @default(now()) @db.Timestamptz()
  updatedAt       DateTime          @updatedAt @db.Timestamptz()
  UserSeePlatform UserSeePlatform[]

  @@map("user")
}

model UserSeeFunctionality {
  id Int @id @default(autoincrement())

  user            User          @relation(fields: [userId], references: [id])
  functionality   Functionality @relation(fields: [functionalityId], references: [id])
  userId          Int
  functionalityId Int

  @@map("userSeeFunctionality")
}

model UserSeePlatform {
  id Int @id @default(autoincrement())

  user       User     @relation(fields: [userId], references: [id])
  platform   Platform @relation(fields: [platformId], references: [id])
  userId     Int
  platformId Int

  @@map("userSeePlatform")
}

enum Role {
  common
  admin
}

model Platform {
  id          Int     @id @default(autoincrement())
  name        String
  keyword     String  @unique
  image       String
  description String?

  NewFunctionality NewFunctionality[]
  functionalities  Functionality[]
  userSeePlatform  UserSeePlatform[]

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("platform")
}

model Functionality {
  id           Int     @id @default(autoincrement())
  name         String
  keyword      String  @unique
  description  String?
  googleSheets Int?
  apiRoute     String?

  messageNotFound String?
  from            String?
  regex           String?
  messageOnFind   String?
  subject         String[]
  text            String[]
  indexToGet      Int[]
  textToReplace   Json[]

  active Boolean @default(false)

  platform                  Platform                    @relation(fields: [platformId], references: [id])
  inputProps                InputProps[]
  actions                   Action[]
  favoriteUserFunctionality FavoriteUserFunctionality[]
  functionalityImages       FunctionalityImage[]
  userSeeFunctionality      UserSeeFunctionality[]

  platformId Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("functionality")
}

model FunctionalityImage {
  id                    Int                     @id @default(autoincrement())
  imagesOnFunctionality ImagesOnFunctionality[]
  active                Boolean

  functionality Functionality @relation(fields: [functionalityId], references: [id])

  functionalityId Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("functionality_images")
}

model ImagesOnFunctionality {
  id           Int    @id @default(autoincrement())
  url          String
  inputOnImage Json[]

  functionalityImage   FunctionalityImage @relation(fields: [functionalityImageId], references: [id])
  functionalityImageId Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("images_on_functionality")
}

model InputProps {
  id          Int       @id @default(autoincrement())
  label       String
  placeholder String
  formValue   String
  isRequired  Boolean
  error       Boolean   @default(false)
  type        InputType
  mask        String?
  maskLength  Int?
  options     Json[]

  functionality   Functionality @relation(fields: [functionalityId], references: [id])
  functionalityId Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("input_props")
}

enum InputType {
  text
  email
  number
  url
}

model FavoriteUserFunctionality {
  id Int @id @default(autoincrement())

  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  functionality   Functionality @relation(fields: [functionalityId], references: [id])
  functionalityId Int
  createdAt       DateTime      @default(now()) @db.Timestamptz()

  @@map("favorite_user_functionality")
}

model Action {
  id       Int      @id @default(autoincrement())
  result   String[]
  hasError Boolean  @default(false)
  data     Json?

  user          User          @relation(fields: [userId], references: [id])
  functionality Functionality @relation(fields: [functionalityId], references: [id])

  functionalityId Int
  userId          Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("action")
}

model NewFunctionality {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  wasRaised   Boolean @default(false)

  platform Platform @relation(fields: [platformId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  userId     Int
  platformId Int

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("newFunctionality")
}

model Images {
  id  Int    @id @default(autoincrement())
  url String

  finishedAt DateTime? @db.Timestamptz()
  createdAt  DateTime  @default(now()) @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @db.Timestamptz()

  @@map("images")
}
